apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'maven-publish'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"

    defaultConfig {
        /*
        https://developer.android.com/reference/androidx/webkit/WebViewFeature#isFeatureSupported(java.lang.String)
        Return whether a feature is supported at run-time.
        On devices running Android version Build.VERSION_CODES.LOLLIPOP and higher,
        this will check whether a feature is supported, depending on the combination
        of the desired feature, the Android version of device, and the WebView APK on
        the device. If running on a device with a lower API level, this will always return false.
         */
        minSdkVersion 21
        targetSdkVersion 29

        versionCode 1
        versionName "1.0.0-beta"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.webkit:webkit:1.2.0'
    implementation 'com.google.code.gson:gson:2.8.6'
}

import org.apache.tools.ant.taskdefs.condition.Os

def evaluateShellScript(String ... script) {
    def byteArrayOutput = new ByteArrayOutputStream()
    try {
        exec {
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                def command = String.format("%s; if (!\$?) { exit 1; }", script.join(' '))
                commandLine 'powershell', '-command', command
            } else {
                commandLine script
            }
            errorOutput = byteArrayOutput
            standardOutput = byteArrayOutput
        }
    } catch (e) {
        e.printStackTrace()
        throw new IllegalStateException(byteArrayOutput.toString())
    }
}

task npmBuild {
    evaluateShellScript 'npm', 'install'
    evaluateShellScript 'npm', 'run', 'compile'
    evaluateShellScript 'npm', 'run', 'compile-price-formatter'
    evaluateShellScript 'npm', 'run', 'compile-time-formatter'
}

task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release
                groupId 'com.tradingview'
                artifactId 'lightweightcharts'
                version android.defaultConfig.versionName

                artifact androidSourcesJar
            }
        }
        repositories {
            maven {
                url "$buildDir/repo"
            }
        }
    }
}